// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    passwordHash  String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    models        Model[]
    dashboards    Dashboard[]
    dashboardAssets DashboardAsset[]
    shares       Share[]
    passwordResetTokens PasswordResetToken[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Model {
    id            String   @id @default(cuid())
    title         String
    description   String?
    ownerId       String
    owner         User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    glbStorageId  String
    usdzStorageId String?
    createdAt     DateTime @default(now())
    shares        Share[]

    @@index([ownerId])
}

model Dashboard {
    id        String   @id @default(cuid())
    ownerId   String
    owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    content   Json     @default("{}")
    createdAt DateTime @default(now())

    @@index([ownerId])
}

model DashboardAsset {
    id         String   @id @default(cuid())
    ownerId    String
    owner      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    storageId  String
    fileType   String
    fileName   String
    createdAt  DateTime @default(now())

    @@index([ownerId])
}

model Share {
    id          String   @id @default(cuid())
    title       String
    description String?
    ownerId     String
    owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    modelId     String?
    model       Model?   @relation(fields: [modelId], references: [id])
    modelUrl    String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([ownerId])
    @@index([modelId])
}

model PasswordResetToken {
    id        String   @id @default(cuid())
    token     String   @unique
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    expiresAt DateTime
    createdAt DateTime @default(now())

    @@index([userId])
}
